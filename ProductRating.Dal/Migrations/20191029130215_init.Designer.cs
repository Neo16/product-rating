// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductRating.Dal;

namespace ProductRating.Dal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191029130215_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data");

                    b.HasKey("Id");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatorId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatorId");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentId");

                    b.Property<Guid?>("ThumbnailPictureId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ThumbnailPictureId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.Offer", b =>
                {
                    b.Property<Guid>("SellerId");

                    b.Property<Guid>("ProductId");

                    b.Property<long>("Price");

                    b.Property<string>("Url");

                    b.HasKey("SellerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BrandId");

                    b.Property<Guid>("CategoryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("CreatorId");

                    b.Property<DateTime>("EndOfProduction");

                    b.Property<string>("Name");

                    b.Property<double>("ScoreValue");

                    b.Property<long?>("SmallestPrice");

                    b.Property<DateTime>("StartOfProduction");

                    b.Property<Guid?>("ThumbnailPictureId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ThumbnailPictureId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("HasFixedValues");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductAttributes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ProductAttribute");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.ProductAttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AttributeId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.ToTable("ProductAttributeValues");

                    b.HasDiscriminator<string>("Type").HasValue("ProductAttributeValue");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.ProductAttributeValueConnection", b =>
                {
                    b.Property<Guid>("ProductAttributeValueId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("ProductAttributeValueId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValueConnections");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.ProductPicture", b =>
                {
                    b.Property<Guid>("PictureId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("PictureId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPicture");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Reviews.ReviewVote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("TextReviewId");

                    b.Property<Guid>("UserId");

                    b.Property<int>("VoteType");

                    b.HasKey("Id");

                    b.HasIndex("TextReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewVotes");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Reviews.Scorereview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("ProductId");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Reviews.TextReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Mood");

                    b.Property<int>("Points");

                    b.Property<Guid>("ProductId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<Guid?>("AvatarId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Introduction");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nationality");

                    b.Property<string>("NickName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Identity.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApiKey");

                    b.Property<long>("DayLimit");

                    b.Property<string>("SiteBaseUrl");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Identity.SubscriptionUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<long>("RequestCount");

                    b.Property<Guid>("SubscriptionId");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionUsage");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.Attributes.ProductAttributeInt", b =>
                {
                    b.HasBaseType("ProductRating.Dal.Model.Entities.Products.ProductAttribute");

                    b.HasDiscriminator().HasValue("ProductAttributeInt");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.Attributes.ProductAttributeString", b =>
                {
                    b.HasBaseType("ProductRating.Dal.Model.Entities.Products.ProductAttribute");

                    b.HasDiscriminator().HasValue("ProductAttributeString");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.Attributes.ProductAttributeIntValue", b =>
                {
                    b.HasBaseType("ProductRating.Dal.Model.Entities.Products.ProductAttributeValue");

                    b.Property<int>("IntValue");

                    b.HasDiscriminator().HasValue("ProductAttributeIntValue");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.Attributes.ProductAttributeStringValue", b =>
                {
                    b.HasBaseType("ProductRating.Dal.Model.Entities.Products.ProductAttributeValue");

                    b.Property<string>("StringValue");

                    b.HasDiscriminator().HasValue("ProductAttributeStringValue");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProductRating.Dal.Model.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.Brand", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Identity.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.Category", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Identity.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("ProductRating.Dal.Model.Entities.Products.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("ProductRating.Dal.Model.Entities.Picture", "ThumbnailPicture")
                        .WithMany()
                        .HasForeignKey("ThumbnailPictureId");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.Offer", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Entities.Products.Product", "Product")
                        .WithMany("Offers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProductRating.Dal.Model.Identity.ApplicationUser", "Seller")
                        .WithMany("Sells")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.Product", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Entities.Products.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("ProductRating.Dal.Model.Entities.Products.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProductRating.Dal.Model.Identity.ApplicationUser", "Creator")
                        .WithMany("CreatedProducts")
                        .HasForeignKey("CreatorId");

                    b.HasOne("ProductRating.Dal.Model.Entities.Picture", "ThumbnailPicture")
                        .WithMany()
                        .HasForeignKey("ThumbnailPictureId");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.ProductAttribute", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Entities.Products.Category", "Category")
                        .WithMany("Attributes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.ProductAttributeValue", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Entities.Products.ProductAttribute", "Attribute")
                        .WithMany("Values")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.ProductAttributeValueConnection", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Entities.Products.ProductAttributeValue", "ProductAttributeValue")
                        .WithMany("ProductConnctions")
                        .HasForeignKey("ProductAttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProductRating.Dal.Model.Entities.Products.Product", "Product")
                        .WithMany("PropertyValueConnections")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Products.ProductPicture", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Entities.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProductRating.Dal.Model.Entities.Products.Product", "Product")
                        .WithMany("Pictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Reviews.ReviewVote", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Entities.Reviews.TextReview", "TextReview")
                        .WithMany("Votes")
                        .HasForeignKey("TextReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProductRating.Dal.Model.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Reviews.Scorereview", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Identity.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProductRating.Dal.Model.Entities.Products.Product", "Product")
                        .WithMany("Scores")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Entities.Reviews.TextReview", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Identity.ApplicationUser", "Author")
                        .WithMany("TextReviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProductRating.Dal.Model.Entities.Products.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Identity.ApplicationUser", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Entities.Picture", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Identity.Subscription", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Identity.ApplicationUser", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductRating.Dal.Model.Identity.SubscriptionUsage", b =>
                {
                    b.HasOne("ProductRating.Dal.Model.Identity.Subscription", "Subscription")
                        .WithMany("Usage")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
